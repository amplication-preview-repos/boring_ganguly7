/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dish as PrismaDish,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class DishServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DishCountArgs, "select">): Promise<number> {
    return this.prisma.dish.count(args);
  }

  async dishes<T extends Prisma.DishFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DishFindManyArgs>
  ): Promise<PrismaDish[]> {
    return this.prisma.dish.findMany<Prisma.DishFindManyArgs>(args);
  }
  async dish<T extends Prisma.DishFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DishFindUniqueArgs>
  ): Promise<PrismaDish | null> {
    return this.prisma.dish.findUnique(args);
  }
  async createDish<T extends Prisma.DishCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DishCreateArgs>
  ): Promise<PrismaDish> {
    return this.prisma.dish.create<T>(args);
  }
  async updateDish<T extends Prisma.DishUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DishUpdateArgs>
  ): Promise<PrismaDish> {
    return this.prisma.dish.update<T>(args);
  }
  async deleteDish<T extends Prisma.DishDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DishDeleteArgs>
  ): Promise<PrismaDish> {
    return this.prisma.dish.delete(args);
  }

  async getRestaurant(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.dish
      .findUnique({
        where: { id: parentId },
      })
      .restaurant();
  }
}
